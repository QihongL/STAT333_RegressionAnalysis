sp = ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +
geom_smooth(method=lm) + geom_point()
sp + xlab("visual coherence") +
ylab("facilitation effect") +
labs(title="Expected rough coorelation between
visual coherence and the magnitude of the facilitation effect")
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,6,0.25) + rnorm(20,1,1),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
# ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1)
sp = ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +
geom_smooth(method=lm) + geom_point()
sp + xlab("visual coherence") +
ylab("facilitation effect") +
labs(title="Expected rough coorelation between
visual coherence and the magnitude of the facilitation effect")
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,6,0.25) + rnorm(20,1,1),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
# ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1)
sp = ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +
geom_smooth(method=lm) + geom_point()
sp + xlab("visual coherence") +
ylab("facilitation effect") +
labs(title="Expected rough coorelation between
visual coherence and the magnitude of the facilitation effect")
xvar
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,6,0.25) + rnorm(20,1,1),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
xvar
6 /2.25
6  - 2.25
3.75 / 0.25
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,7,0.25) + rnorm(20,1,1),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
# ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1)
sp = ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +
geom_smooth(method=lm) + geom_point()
sp + xlab("visual coherence") +
ylab("facilitation effect") +
labs(title="Expected rough coorelation between
visual coherence and the magnitude of the facilitation effect")
library(set)
library(sets)
download.packages(sets)
download.packages("sets")
download.packages
download.packages()
download.packages()
? download.packages()
install.packages(sets)
install.packages("sets")
Omega = set("a", "b", "c")
library(sets)
Omega = set("a", "b", "c")
2^Omega
3^Omega
2^Omega
length(2^Omega)
Omega = set("a", "b", "c", "d")
length(2^Omega)
Omega = set("a", "b", "c", "d", "e")
length(2^Omega)
5 * 4 * 3 * 2
factorial(5)
installed.packages
installed.packages()
library("ggplot2")
library(ggplot2)
x = seq(-2,2, sep = 0.1)
? seq
x = seq(-2,2, by = 0.1)
rm(list = ls())
x = seq(-2,2, by = 0.1)
y = 1 / ( 1 + exp(-x))
plot(x,y)
geom_line()
? geom_line
a = geom_line(x,y)
a
a = ggplot(aes(x,y))
D = data.frame(x = c(-1, 0, 1, 2, 3, 4), y = c(0, 1/8,
3/8, 3/8, 1/8, 0))
qplot(x, y, data = D, xlab = "$x$", ylab = "$p_X(x)$") +
geom_linerange(aes(x = x, ymin = 0, ymax = y))
library(ggplot2)
D = data.frame(x = c(-1, 0, 1, 2, 3, 4), y = c(0, 1/8,
3/8, 3/8, 1/8, 0))
qplot(x, y, data = D, xlab = "$x$", ylab = "$p_X(x)$") +
geom_linerange(aes(x = x, ymin = 0, ymax = y))
x = seq(-0.5, 1.5, length = 100)
y = x^2
y[x < 0] = 0
y[x > 1] = 1
z = 2 * x
z[x < 0] = 0
z[x > 1] = 0
D = stack(list(`$f_R(r)$` = z, `$F_R(r)$` = y))
names(D) = c("probability", "Function")
D$x = x
qplot(x, y = probability, geom = "line", xlab = "$r$",
ylab = "", lty = Function, color = Function, data = D,
size = I(1.5))
x = seq(-6, 6, length.out = 200)
R = data.frame(density = dnorm(x, 0, 1))
R$tdensity = dt(x, 1.5)
R$x = x
P = ggplot(R, aes(x = x, y = density)) + geom_area(fill = I("grey")) +
geom_line(aes(x = x, y = tdensity), xlab = "$x$",
ylab = "$f_X(x)$", lwd = I(2))
P + opts(title = "Gaussian (shaded) and t-distribution (dof=1.5) densities")
source('~/Code/R/chris_tutorial.R', echo=TRUE)
y
source('~/Code/R/chris_tutorial.R', echo=TRUE)
y = sign(rnorm(100))
rm(list = ls());
y = sign(rnorm(100))
t
y
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
x
y
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
m = glm(y ~ x[,1], family = bino)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
x
x[,1]
x[,1:end]
x[,1:100]
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
plot(x[,1],y)
rnorm(100)
rnorm(100^@)
rnorm(100^2)
dim(rnorm(100^2))
dim(x)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
summary(m)
m = glm(y ~ x[,1], family = binomial)
summary(m)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/overfittingDemo.R', echo=TRUE)
rnorm(3^2)
rnorm(10,2)
setwd('/Users/Qihong/Code/github/STAT333_RegressionAnalysis/333projectCode')
rm(list = ls())
library(GGally)
library(car)
library(plyr)
mydata = read.csv('databases/OpenAir_example_data_long.csv')
dim(mydata)
dim(mydata)
# temp: trim the dimentionality of the input space
mydata = data.frame(mydata[1:500,2:9])
summary(mydata)
lm.fit = lm (mydata$pm10 ~ mydata$ws * mydata$wd * mydata$nox * mydata$no2 * mydata$o3 * mydata$so2 * mydata$co)
lm.fit = lm (mydata$pm10 ~ mydata$ws * mydata$wd * mydata$nox *
mydata$no2 * mydata$o3 * mydata$so2 * mydata$co)
summary(lm.fit)
lm.fit = lm (mydata$pm10 ~ mydata$ws * mydata$wd * mydata$nox *
mydata$no2 * mydata$o3 * mydata$so2 * mydata$co)
summary(lm.fit)
anova(lm.fit)
mydata[1]
mydata[2]
ggpairs(mydata, pch = 20)
plot(mydata)
plot(mydata, pch = 16)
plot(lm.fit$residuals ~ lm.fit$fitted.values)
plot(lm.fit)
plot(lm.fit, pch = 16)
plot(lm.fit$residuals ~ mydata$ws)
plot(lm.fit$residuals ~ mydata$ws)
dim(lm.fit$residuals)
lm.fit$residuals
plot(t(lm.fit$residuals) ~ mydata$ws)
mydata$ws
plot(lm.fit$residuals , mydata$ws)
length(mydata$ws)
length(lm.fit$residuals)
dim(mydata)
lm.fit = lm (mydata$pm10 ~ mydata$ws * mydata$wd * mydata$nox *
mydata$no2 * mydata$o3 * mydata$so2 * mydata$co)
summary(lm.fit)
length(lm.fit$residuals)
# temp: trim the dimentionality of the input space
mydata = data.frame(mydata[1:300,2:9])
# glance at the data
summary(mydata)
# ggpairs(mydata, pch = 20)
plot(mydata, pch = 16)
# fit everything
lm.fit = lm (mydata$pm10 ~ mydata$ws * mydata$wd * mydata$nox *
mydata$no2 * mydata$o3 * mydata$so2 * mydata$co)
summary(lm.fit)
anova(lm.fit)
plot(lm.fit, pch = 16)
plot(lm.fit$residuals , mydata$ws)
length(mydata)
dim(mydata)
setwd('/Users/Qihong/Code/github/STAT333_RegressionAnalysis/333projectCode')
rm(list = ls())
library(GGally)
library(car)
library(plyr)
mydata = read.csv('databases/OpenAir_example_data_long.csv')
dim(mydata)
# temp: trim the dimentionality of the input space
mydata = data.frame(mydata[1:300,2:9])
# glance at the data
summary(mydata)
# ggpairs(mydata, pch = 20)
plot(mydata, pch = 16)
# fit everything
lm.fit = lm (mydata$pm10 ~ mydata$ws * mydata$wd * mydata$nox *
mydata$no2 * mydata$o3 * mydata$so2 * mydata$co)
summary(lm.fit)
plot(lm.fit$residuals , mydata$ws)
length(mydata$ws)
length(lm.fit$residuals)
head(lm.fit)
summary(lm.fit)
plot(lm.fit)
anova
anova(lm.fit)
anova(lm.fit)
plot(mydata, pch = 16)
summary(lm.fit)
Anova(lm.fit)
Anova(lm.fit, type = 'III')
anova
anova(lm.fit)
summary(lm.fit)
cc
clc
lm.fit = lm (mydata$pm10 ~ mydata$ws)
lm.fit1 = lm (mydata$pm10 ~ mydata$ws)
lm.fit1 = lm (mydata$pm10 ~ mydata$ws)
summary(lm.fit1)
anova(lm.fit1)
plot(lm.fit1)
plot(mydata$pm10 ~ mydata$ws)
abline(lm.fit1, col = 'red')
abline(lm.fit)
source('~/Code/github/STAT333_RegressionAnalysis/333projectCode/openAir.R', echo=TRUE)
source('~/Code/github/STAT333_RegressionAnalysis/333projectCode/openAir.R', echo=TRUE)
abline(lm.fit)
abline(lm.fit1, col = 'red')
plot(lm.fit1)
lm.fit1 = lm (mydata$pm10 ~ mydata$ws)
summary(lm.fit1)
anova(lm.fit1)
lm.fit2 = lm (mydata$pm10 ~ mydata$wd)
summary(lm.fit2)
summary(lm.fit1)
summary(lm.fit2)
anova(lm.fit2)
plot(lm.fit2)
plot(mydata$pm10 ~ mydata$wd)
abline(lm.fit2, col = 'red')
plot(lm.fit2)
abline(lm.fit1, col = 'red')
plot(lm.fit1)
plot(lm.fit2)
ggpairs(mydata)
lm.fit_nox = lm (mydata$pm10 ~ mydata$nox)
summary(lm.fit_nox)
plot(mydata$pm10 ~ mydata$nox)
plot(mydata$pm10 ~ mydata$nox, pch = 20)
abline(lm.fit_nox)
plot(lm.fit_nox)
abline(lm.fit_nox)
plot(mydata$pm10 ~ mydata$nox, pch = 20)
summary(lm.fit_nox)
lm.fit_nox = lm (mydata$pm10 ~ mydata$nox)
summary(lm.fit_nox)
plot(mydata$pm10 ~ mydata$nox, pch = 20)
abline(lm.fit_nox)
plot(lm.fit_nox)
hist(mydata)
summary(lm.fit)
lm.fit = lm (mydata$pm10 ~ mydata$ws + mydata$wd + mydata$nox +
mydata$no2 + mydata$o3 + mydata$so2 + mydata$co)
summary(lm.fit)
Anova(lm.fit, type = 'III')
lm.fit = lm (mydata$pm10 ~ mydata$ws * mydata$wd * mydata$nox *
mydata$no2 * mydata$o3 * mydata$so2 * mydata$co)
lm.fit_noInt = lm (mydata$pm10 ~ mydata$ws + mydata$wd + mydata$nox +
mydata$no2 + mydata$o3 + mydata$so2 + mydata$co)
# Some preliminary analysis for potential data for 333 prject
setwd('/Users/Qihong/Code/github/STAT333_RegressionAnalysis/333projectCode')
rm(list = ls())
library(GGally)
library(car)
library(plyr)
mydata = read.csv('databases/OpenAir_example_data_long.csv')
dim(mydata)
summary(mydata)
head(mydata)
a =
c(1,2,3,4, NA)
a
b = c(2, NA, NA, 1 , 2)
a
b
cbind(a,b)
temp = cbind(a,b)
temp
temp[3]
temp[3,]
is.na(temp)
source('~/Code/github/STAT333_RegressionAnalysis/333projectCode/openAir.R', echo=TRUE)
dim(mydata)
# Some preliminary analysis for potential data for 333 prject
setwd('/Users/Qihong/Code/github/STAT333_RegressionAnalysis/333projectCode')
rm(list = ls())
library(GGally)
library(car)
library(plyr)
mydata = read.csv('databases/OpenAir_example_data_long.csv')
dim(mydata)
head(mydata)
install.packages('openair')
library('openair')
marylebone = importAURN(site = 'my1', year = 2000:2002)
head(MY1_2000)
marylebone = importAURN(site = 'my1', year = 2000:2000)
library('dplyr')
marylebone = importAURN(site = 'my1', year = 2000:2000)
ls
# Some preliminary analysis for potential data for 333 prject
setwd('/Users/Qihong/Code/github/STAT333_RegressionAnalysis/333projectCode')
rm(list = ls())
library(GGally)
library(car)
library(plyr)
mydata = read.csv('databases/OpenAir_example_data_long.csv')
dim(mydata)
# temp: trim the dimentionality of the input space
mydata = data.frame(mydata[1:300,2:9])
# glance at the data
summary(mydata)
# ggpairs(mydata, pch = 20)
plot(mydata, pch = 16)
source('~/Code/github/STAT333_RegressionAnalysis/333projectCode/openAir.R', echo=TRUE)
# Some preliminary analysis for potential data for 333 prject
setwd('/Users/Qihong/Code/github/STAT333_RegressionAnalysis/333projectCode')
rm(list = ls())
library(GGally)
library(car)
library(plyr)
mydata = read.csv('databases/OpenAir_example_data_long.csv')
dim(mydata)
# temp: trim the dimentionality of the input space
mydata = data.frame(mydata[1:300,2:9])
# glance at the data
summary(mydata)
# ggpairs(mydata, pch = 20)
plot(mydata, pch = 16)
# fit everything
lm.fit = lm (mydata$pm10 ~ mydata$ws * mydata$wd * mydata$nox *
mydata$no2 * mydata$o3 * mydata$so2 * mydata$co)
summary(lm.fit)
a = c(1,2,3,4,5, NA)
a
b = C(1,2,3,3,4,5,6)
b = c(1,2,3,3,4,5,6)
a
b
data = rbind(a,b)
data
complete.cases(data)
data[complete.cases(data)]
data[complete.cases(data), ]
# Some preliminary analysis for potential data for 333 prject
setwd('/Users/Qihong/Code/github/STAT333_RegressionAnalysis/333projectCode')
rm(list = ls())
library(GGally)
library(car)
library(plyr)
mydata = read.csv('databases/OpenAir_example_data_long.csv')
dim(mydata)
mydata[complete.cases(mydata), ]
mydata = mydata[complete.cases(mydata), ]
dim(mydata)
mydata = mydata[complete.cases(mydata), ]
# temp: trim the dimentionality of the input space
mydata = data.frame(mydata[1:300,2:10])
plot(mydata, pch = 16)
# Some preliminary analysis for potential data for 333 prject
setwd('/Users/Qihong/Code/github/STAT333_RegressionAnalysis/333projectCode')
rm(list = ls())
library(GGally)
library(car)
library(plyr)
mydata = read.csv('databases/OpenAir_example_data_long.csv')
dim(mydata)
# eliminate row with NA
mydata = mydata[complete.cases(mydata), ]
# temp: trim the dimentionality of the input space
mydata = data.frame(mydata[1:300,2:10])
# glance at the data
summary(mydata)
# ggpairs(mydata, pch = 20)
plot(mydata, pch = 16)
# fit everything
lm.fit = lm (mydata$pm10 ~ mydata$ws * mydata$wd * mydata$nox *
mydata$no2 * mydata$o3 * mydata$so2 * mydata$co)
summary(lm.fit)
summary(lm.fit)
anova(lm.fit)
setwd('/Users/Qihong/Code/github/STAT333_RegressionAnalysis/333projectCode')
rm(list = ls())
library(GGally)
library(car)
library(plyr)
mydata = read.csv('databases/OpenAir_example_data_long.csv')
dim(mydata)
# eliminate row with NA
mydata = mydata[complete.cases(mydata), ]
summary(mydata)
lm.fit = lm (mydata$pm10 ~ mydata$nox * mydata$no2 * mydata$o3 * mydata$so2 * mydata$co)
summary(lm.fit)
lm.fit = lm (mydata$pm10 ~ mydata$nox * mydata$no2 * mydata$o3 * mydata$so2 * mydata$co)
summary(lm.fit)
lm.fit = lm (mydata$pm10 ~ mydata$nox * mydata$no2 * mydata$so2 * mydata$co)
summary(lm.fit)
# Some preliminary analysis for potential data for 333 prject
setwd('/Users/Qihong/Code/github/STAT333_RegressionAnalysis/333projectCode')
rm(list = ls())
library(GGally)
library(car)
library(plyr)
mydata = read.csv('databases/OpenAir_example_data_long.csv')
dim(mydata)
# eliminate row with NA
mydata = mydata[complete.cases(mydata), ]
# temp: trim the dimentionality of the input space
# mydata = data.frame(mydata[1:300,2:10])
# glance at the data
summary(mydata)
ggpairs(mydata, pch = 20)
mydata = data.frame(mydata[,2:10])
ggpairs(mydata, pch = 20)
mydata = data.frame(mydata[,1:9])
ggpairs(mydata, pch = 20)
plot(mydata, pch = 16)
# Some preliminary analysis for potential data for 333 prject
setwd('/Users/Qihong/Code/github/STAT333_RegressionAnalysis/333projectCode')
rm(list = ls())
library(GGally)
library(car)
library(plyr)
mydata = read.csv('databases/OpenAir_example_data_long.csv')
dim(mydata)
# eliminate row with NA
mydata = mydata[complete.cases(mydata), ]
# temp: trim the dimentionality of the input space
# important before plotting data...
mydata = data.frame(mydata[1:300,2:10])
